
Hàm os_type: Nếu đối số là 64 hoặc 128 thì in ra chuỗi tương ứng không thì sẽ in ra IP và hệ điều hành không xác định
Hàm ttl: Sử dụng lấy giá trị ttl  
Sử dụng nmap để quét các địa chỉ IP trong mạng con và lưu vào biến IPS. Sau đó sử dụng vòng for để duyệt qua từng IP trong biến IPS, sử dụng hàm os_type 
để phân biệt các hệ điều hành trên các máy tính mạng và in ra.
		
GNU nano 6.2                                 ping.sh  
 
#!/bin/bash
function os_type() {
	case $2  in 
	   64) echo "There is a computer with $1 Linux/Mac" ;;
	   128) echo "There is a computer with $1 Window" ;;
	   *) echo "There is a computer with $1 O";;
	esac
}

function ttl() {
	ping -w1 $1 | grep ttl | awk '{print $6}' | sed 's/ttl=//g'
}

IPS=$(nmap -sP -n $1/$2 | grep report | awk '{print $5}')  
	for I in ${IPS[@]}
	do
		a=$(ttl $I)
		os_type $I $a
	done
fi

--------Nmap là một công cụ quét mạng được sử dụng để khám phá các máy chủ và thiết bị trên mạng.Nmap có thể xác định các máy chủ đang hoạt động trên mạng,
các dịch vụ đang chạy trên máy chủ đó, phiên bản hệ điều hành của máy chủ
Hàm print_ip: Sử dụng lệnh nmap để quét mạng và in ra danh sách các địa chỉ IP của các máy tính trong mạng
Hàm print_os: Sử dụng lệnh nmap để xác định phiên bản của hệ điều hành trên một máy tính cụ thể
Hàm print_type: In ra thông tin về phiên bản của hệ điều hành và loại máy tính
sử dụng hàm print_ip để lấy danh sách các địa chỉ IP của các máy tính trong mạng, vòng lặp for được sử dụng để lặp qua danh sách các địa chỉ IP và sử dụng 
hàm print_os để xác định phiên bản của hệ điều hành trên từng máy tính. Cuối cùng, hàm print_type được sử dụng để in ra thông tin về phiên bản của hệ điều 
hành và ip máy tính.

 GNU nano 6.2                                 nmapcheck.sh   
 
#!/bin/bash
function print_ip(){
	(nmap -n -O $1/$2 | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
}

function print_os(){
	(nmap -n -O $1/32 | grep 'OS details:' | sed 's/OS details://g')
}

function print_type() {
	echo "There is a computer with $1 running $2 OS";
}
IPs=$(print_ip $1 $2) 
for i in ${IPs[@]}
do
	os=$(print_os $i)
	print_type $i $os
done